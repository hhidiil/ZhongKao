#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('midexam:server');

/**
 * Get port from environment and store in Express.
 */

var port = 10008;
app.set('port', port);

/**
 * Create HTTP server.
 */
if(process.env.NODE_ENV == "development"){
  var http = require('http');
  var server = http.createServer(app);
}else {
  //Create HTTPS server
  console.log("进入----https---")
  var http= require("https");
  var fs = require("fs");
  var path = require('path');
  var privateKey  =  fs.readFileSync('/etc/nginx/ssl/idiil.com.cn.key', '', 'utf8');
  var certificate =  fs.readFileSync('/etc/nginx/ssl/idiil.com.cn.chained.crt', '', 'utf8');
  var credentials = {key: privateKey, cert: certificate};
  var server = http.createServer(credentials,app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("Listening... "+port)
}
